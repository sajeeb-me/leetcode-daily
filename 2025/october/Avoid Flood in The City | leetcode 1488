problem: https://leetcode.com/problems/avoid-flood-in-the-city/description/?envType=daily-question&envId=2025-10-07

solution:
class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {
        int n = rains.size();
        vector<int> ans;
        unordered_map<int, int> full;
        set<int> dryDay;

        for(int i=0; i<n; i++){
            if(rains[i] == 0){
                dryDay.insert(i);
                ans.push_back(1);
            } else {
                int lake = rains[i];
                if(full.find(lake) != full.end()){
                    int dayBecameFull = full[lake];
                    auto it = dryDay.lower_bound(dayBecameFull);
                    if(it == dryDay.end()) return {};
                    int day = *it;
                    ans[day] = lake;
                    dryDay.erase(day);
                }
                full[lake] = i;
                ans.push_back(-1);
            }
        }

        return ans;
    }
};
