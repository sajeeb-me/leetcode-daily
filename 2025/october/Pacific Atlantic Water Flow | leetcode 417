problem:  https://leetcode.com/problems/pacific-atlantic-water-flow/description/?envType=daily-question&envId=2025-10-05

solution:
class Solution {
private:
    vector<vector<int>> res;
    vector<vector<bool>> atl, pac;

    void dfs(vector<vector<int>>& heights, vector<vector<bool>>& visited, int i, int j, int m, int n){
        if(visited[i][j]) return;
        visited[i][j] = true;

        if(atl[i][j] && pac[i][j]) res.push_back({i, j});

        if(i+1 < m && heights[i+1][j] >= heights[i][j]) dfs(heights, visited, i+1, j, m, n);
        if(i-1 >= 0 && heights[i-1][j] >= heights[i][j]) dfs(heights, visited, i-1, j, m, n);
        if(j+1 < n && heights[i][j+1] >= heights[i][j]) dfs(heights, visited, i, j+1, m, n);
        if(j-1 >= 0 && heights[i][j-1] >= heights[i][j]) dfs(heights, visited, i, j-1, m, n);
    }
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size(), n = heights[0].size();
        atl = pac = vector<vector<bool>>(m, vector<bool>(n, false));

        for(int i=0; i<m; i++){
            dfs(heights, atl, i, 0, m, n);
            dfs(heights, pac, i, n-1, m, n);
        }
        for(int i=0; i<n; i++){
            dfs(heights, atl, 0, i, m, n);
            dfs(heights, pac, m-1, i, m, n);
        }

        return res;
    }
};

