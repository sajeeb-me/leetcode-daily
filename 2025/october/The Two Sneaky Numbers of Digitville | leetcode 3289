problem: https://leetcode.com/problems/the-two-sneaky-numbers-of-digitville/description/?envType=daily-question&envId=2025-10-31

solution:
// Solution 1:
class Solution {
public:
    vector<int> getSneakyNumbers(vector<int>& nums) {
        unordered_map<int, int> freq;
        vector<int> res;
        for(int n : nums){
            freq[n]++;
            if(freq[n] == 2) res.push_back(n);
            if(res.size() == 2) return res;
        }
        return res;
    }
};

// Solution 2:
class Solution {
public:
    vector<int> getSneakyNumbers(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<int> res;
        for(int i=1; i<nums.size(); i++){
            if(nums[i] == nums[i-1]) res.push_back(nums[i]);
            if(res.size() == 2) return res;
        }
        return res;
    }
};

// Solution 3:
class Solution {
public:
    vector<int> getSneakyNumbers(vector<int>& nums) {
        int n = nums.size() - 2;
        int XOR = 0;

        for(int n : nums) XOR ^= n;
        for(int i=0; i<n; i++) XOR ^= i;

        int leadingZeros = __builtin_ctz(XOR);
        int mask = 1 << leadingZeros;
        int a = 0, b = 0;

        for(int n : nums){
            if(n & mask) a ^= n;
            else b ^= n;
        }
        for(int i=0; i<n; i++){
            if(i & mask) a ^= i;
            else b ^= i;
        }

        return {a, b};
    }
};
