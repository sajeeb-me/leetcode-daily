problem: https://leetcode.com/problems/maximum-frequency-of-an-element-after-performing-operations-ii/description/?envType=daily-question&envId=2025-10-22

solution:
class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int numOperations) {
        int n = nums.size(), res = 0, l=0, r=0;
        sort(nums.begin(), nums.end());

        unordered_map<int, int> freq;
        for(int n : nums) freq[n]++;

        for(int i=0; i<n; i++){
            while(nums[i] - nums[l] > k) l++;
            while(r < n-1 && nums[r+1] - nums[i] <= k) r++;
            int currDist = r-l+1;
            int cnt = min(currDist - freq[nums[i]], numOperations);
            res = max(res, cnt+freq[nums[i]]);
        }
        
        l=0;
        for(int r=0; r<n; r++){
            int mid = (nums[l]+nums[r]) / 2;
            while(mid - nums[l] > k || nums[r] - mid > k){
                l++;
                mid = (nums[l]+nums[r]) / 2;
            }
            res = max(res, min(r-l+1, numOperations));
        }

        return res;
    }
};
