problem: https://leetcode.com/problems/design-movie-rental-system/description/?envType=daily-question&envId=2025-09-21

solution:
class MovieRentingSystem {
private:
    map<int, set<pair<int, int>> > availableMovies;
    set<tuple<int, int, int>> rented;
    map<pair<int, int>, int> prices;

public:
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        for(const auto& ent : entries){
            int shop = ent[0], movie = ent[1], price = ent[2];
            availableMovies[movie].insert({price, shop});
            prices[{shop, movie}] = price;
        }
    }
    
    vector<int> search(int movie) {
        vector<int> res;
        if(availableMovies.count(movie)){
            auto& shops = availableMovies.at(movie);
            int cnt = 0;
            for(const auto& shop : shops){
                if(cnt >= 5) break;
                res.push_back(shop.second);
                cnt++;
            }
        }
        return res;
    }
    
    void rent(int shop, int movie) {
        int price = prices.at({shop, movie});
        availableMovies.at(movie).erase({price, shop});
        rented.insert({price, shop, movie});
    }
    
    void drop(int shop, int movie) {
        int price = prices.at({shop, movie});
        rented.erase({price, shop, movie});
        availableMovies.at(movie).insert({price, shop});
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> res;
        int cnt = 0;
        for(const auto& movie : rented){
            if(cnt >= 5) break;
            res.push_back({get<1>(movie), get<2>(movie)});
            cnt++;
        }
        return res;
    }
};

/**
 * Your MovieRentingSystem object will be instantiated and called as such:
 * MovieRentingSystem* obj = new MovieRentingSystem(n, entries);
 * vector<int> param_1 = obj->search(movie);
 * obj->rent(shop,movie);
 * obj->drop(shop,movie);
 * vector<vector<int>> param_4 = obj->report();
 */
