Problem: https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-ii/description/?envType=daily-question&envId=2025-08-23

Solution:
class Solution {
private:
    int minArea(vector<vector<int>>& grid, int st_i, int end_i, int st_j, int end_j){
        int top = INT_MAX, bottom = -1, left = INT_MAX, right = -1, isFound = 0;
        for(int i=st_i; i<=end_i; i++){
            for(int j=st_j; j<=end_j; j++){
                if(grid[i][j]){
                    top = min(top, i);
                    bottom = max(bottom, i);
                    left = min(left, j);
                    right = max(right, j);
                    isFound = 1;
                }
            }
        }
        return isFound ? ((bottom - top + 1) * (right - left + 1)) : 0;
    }

public:
    int minimumSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), ans = INT_MAX, first, second, third;

        // hor + ver + ver
        for(int i=0; i<m; i++){
            first = minArea(grid, 0, i, 0, n-1);
            for(int j=0; j<n; j++){
                second = minArea(grid, i+1, m-1, 0, j);
                third = minArea(grid, i+1, m-1, j+1, n-1);
                ans = min(ans, first+second+third);
            }
        }

        // ver + hor + hor
        for(int j=0; j<n; j++){
            first = minArea(grid, 0, m-1, 0, j);
            for(int i=0; i<m; i++){
                second = minArea(grid, 0, i, j+1, n-1);
                third = minArea(grid, i+1, m-1, j+1, n-1);
                ans = min(ans, first+second+third);
            }
        }

        // hor + hor + ver
        for(int j=n-1; j>=0; j--){
            first = minArea(grid, 0, m-1, j+1, n-1);
            for(int i=0; i<m; i++){
                second = minArea(grid, 0, i, 0, j);
                third = minArea(grid, i+1, m-1, 0, j);
                ans = min(ans, first+second+third);
            }
        }

        // ver + ver + hor
        for(int i=m-1; i>=0; i--){
            first = minArea(grid, i+1, m-1, 0, n-1);
            for(int j=0; j<n; j++){
                second = minArea(grid, 0, i, 0, j);
                third = minArea(grid, 0, i, j+1, n-1);
                ans = min(ans, first+second+third);
            }
        }

        // hor + hor + hor
        for(int i=0; i<m; i++){
            for(int j=i+1; j<m; j++){
                first = minArea(grid, 0, i, 0, n-1);
                second = minArea(grid, i+1, j, 0, n-1);
                third = minArea(grid, j+1, m-1, 0, n-1);
                ans = min(ans, first+second+third);
            }
        }

        // ver + ver + ver
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                first = minArea(grid, 0, m-1, 0, i);
                second = minArea(grid, 0, m-1, i+1, j);
                third = minArea(grid, 0, m-1, j+1, n-1);
                ans = min(ans, first+second+third);
            }
        }

        return ans;
    }
};
