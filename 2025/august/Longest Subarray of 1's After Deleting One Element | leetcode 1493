Problem: https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/description/?envType=daily-question&envId=2025-08-24

Solution:
// Approach 1
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int left=0, right=0, zero=0, maxL=0;
        while(right < nums.size()){
            if(nums[right] == 0) zero++;
            while(zero > 1){
                if(nums[left] == 0) zero--;
                left++;
            }
            maxL = max(maxL, right-left);
            right++;
        }
        return maxL;
    }
};

// Approach 1
class Solution {
public:
    int longestSubarray(vector<int>& nums) {
        int n = nums.size();
        vector<int> left(n, 0), right(n, 0);

        for(int i=1; i<n; i++) if(nums[i-1] == 1)
            left[i] = left[i-1] + 1;
        
        for(int i=n-2; i>=0; i--) if(nums[i+1] == 1)
            right[i] = right[i+1] + 1;
        
        int res = 0;
        for(int i=0; i<n; i++) res = max(res, left[i]+right[i]);
        return res;
    }
};
