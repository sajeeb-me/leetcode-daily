Problem: https://leetcode.com/problems/length-of-longest-v-shaped-diagonal-segment/description/?envType=daily-question&envId=2025-08-27

Solution: 

class Solution {
private:
    vector<vector<int>> dirs = {{1, 1}, {1, -1}, {-1, -1}, {-1, 1}};
    int dp[501][501][4][2];

    int helper(int i, int j, int k, bool turn, int val, vector<vector<int>>& grid){
        i += dirs[k][0];
        j += dirs[k][1];

        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || grid[i][j] != val) return 0;
        if(dp[i][j][k][turn] != -1) return dp[i][j][k][turn];

        int res = 0;
        int sameDir = 1 + helper(i, j, k, turn, val == 2 ? 0 : 2, grid);
        res = max(res, sameDir);

        if(turn){
            int newDir = max(sameDir, 1 + helper(i, j, (k+1)%4, false, val == 2 ? 0: 2, grid));
            res = max(res, newDir);
        }
        return dp[i][j][k][turn] = res;
    }

public:
    int lenOfVDiagonal(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), res = 0;
        memset(dp, -1, sizeof(dp));
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    for(int k = 0; k < 4; k++) {
                        res = max(res, 1 + helper(i, j, k, true, 2,  grid));
                    }
                }
            }
        }
        return res;
    }
};
